




for(let i = 0; i < tree ; i++){
   let result =  fpmove.filter(p => p[0]=== coord[i][0] && p[1] === coord[i][1])
   console.log('duplication', result)
}


console.log('deplacement joueur 1 ', fpmove)
fpmove.push([coord[size-1][0] + pas, coord[size-1][1]], 
          [coord[size-1][0] + pas*2, coord[size-1][1]], 
          [coord[size-1][0] + pas*3, coord[size-1][1]],
          [coord[size-1][0] - pas, coord[size-1][1]],
          [coord[size-1][0] - pas*2, coord[size-1][1]],
          [coord[size-1][0] - pas*3, coord[size-1][1]],
        // y
          [coord[size-1][0] , coord[size-1][1]+ pas], 
          [coord[size-1][0] , coord[size-1][1]+ pas*2], 
          [coord[size-1][0] , coord[size-1][1]+ pas*3],
          [coord[size-1][0] , coord[size-1][1]- pas],
          [coord[size-1][0] , coord[size-1][1]- pas*2],
          [coord[size-1][0] , coord[size-1][1]- pas*3],  
          )

// Dessin des cases accessibles
for(let i = 0; i < 12; i++){
    ctx.fillStyle = "rgba(255, 0, 0, .5)"
    ctx.fillRect(fpmove[i][0], fpmove[i][1], pas, pas)

}

cases deplacement dans un tableau
tableau brut des cases deplacement
tableau brut comparé aux obstacles (11 premières entrées du tableau coord )
Si duplication dessin couleur rouge sinon vert